{"version":3,"sources":["assets/menu-dark.svg","assets/close-dark.svg","react-auth0-spa.js","components/Nav/Nav.js","components/Profile/Profile.js","utils/history.js","components/PrivateRoute.js","components/MessageListItem/MessageListItem.js","components/MessageList/MessageList.js","views/Messages.js","views/ExternalApi.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","NavBar","useState","display","setDisplay","isAuthenticated","loginWithRedirect","logout","openIcon","className","src","require","closeIcon","loginButton","hreh","onClick","href","to","Profile","loading","user","picture","alt","name","email","JSON","stringify","createBrowserHistory","PrivateRoute","Component","component","path","rest","useEffect","a","appState","targetUrl","fn","render","props","MessageListItem","Date","date","message","slice","displayMsg","setDisplayMsg","body","style","overflow","toggleDisplayMsg","msg","id","msgListItem","month","_month_","getMonth","day","getDate","formattedDate","MessageList","messages","map","i","key","preview","Messages","getTokenSilently","setMessages","getAllMessages","token","fetch","headers","Authorization","response","json","responseData","console","error","ExternalApi","showResult","setShowResult","apiMessage","callApi","log","App","exact","Boolean","hostname","match","ReactDOM","children","onRedirectCallback","initOptions","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","getUser","initAuth0","loginWithPopup","params","Provider","value","getIdTokenClaims","getTokenWithPopup","domain","config","client_id","clientId","redirect_uri","origin","audience","push","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9674ed36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/menu-dark.c275e518.svg\";","module.exports = __webpack_public_path__ + \"static/media/close-dark.777b93c6.svg\";","import React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes(\"code=\") &&\n          window.location.search.includes(\"state=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};","import React, { useState, Fragment } from \"react\";\nimport { useAuth0 } from \"../../react-auth0-spa\";\nimport { Link } from \"react-router-dom\";\nimport \"./Nav.css\";\n\nconst NavBar = () => {\n  const [display, setDisplay] = useState(false);\n  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n  const toggleDisplay = () => {\n    if (display === true) {\n      setDisplay(false)\n    } else {\n      setDisplay(true)\n    }\n  }\n\n  const openIcon = <img className='icon' src={require('../../assets/menu-dark.svg')} />\n  const closeIcon = <img className='icon' src={require('../../assets/close-dark.svg')} />\n\n  const loginButton = () => {\n    //console.log('isAuthenticated')\n    //console.log(isAuthenticated)\n    if (isAuthenticated) {\n      return <a hreh='#' className='menu-link' onClick={() => logout()}>Log out</a>;\n    } else if (isAuthenticated === false) {\n      return <a href='#' className='menu-link' onClick={() => loginWithRedirect({})}>Log in</a>;\n    }\n  }\n\n    const menu = () => {\n    if (display === true) {\n      return (\n        <div className='menu open'>\n          <h1 className='menu-title'><Link to=\"/\">Dashboard</Link></h1>\n          <div className='menu-links'>\n            {isAuthenticated && (\n              <Fragment>\n                <div><Link to=\"/\">Home</Link></div>\n              <div><Link to=\"/profile\">Profile</Link></div>\n              <div><Link to=\"/messages\">Messages</Link></div>\n              </Fragment>\n            )}\n            <div>{loginButton()}</div>\n          </div>\n\n        </div>\n      )\n    } else {\n      return (\n        <div className='menu'>\n          <h1 className='menu-title'><Link to=\"/\">Dashboard</Link></h1>\n          {isAuthenticated && (\n            <div className='menu-links'>\n              <div><Link to=\"/\">Home</Link></div>\n              <div><Link to=\"/profile\">Profile</Link></div>\n              <div><Link to=\"/messages\">Messages</Link></div>\n              <div>{loginButton()}</div>\n            </div>\n          )}\n        </div>\n      )\n    }\n  }\n\n  return (\n    <div>\n      <button className='fab' onClick={toggleDisplay}>\n        {display === true ? closeIcon : openIcon}\n      </button>\n      {menu()}\n    </div>\n  );\n\n};\n\n\nexport default NavBar;","import React, { Fragment } from \"react\";\nimport { useAuth0 } from \"../../react-auth0-spa\";\nimport \"./Profile.css\";\n\nconst Profile = () => {\n  const { loading, user } = useAuth0();\n\n  if (loading || !user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Fragment>\n      <img src={user.picture} alt=\"Profile\" />\n\n      <h2>{user.name}</h2>\n      <p>{user.email}</p>\n      <code>{JSON.stringify(user, null, 2)}</code>\n    </Fragment>\n  );\n};\n\nexport default Profile;","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\n  const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\n\n  useEffect(() => {\n    if (loading || isAuthenticated) {\n      return;\n    }\n    const fn = async () => {\n      await loginWithRedirect({\n        appState: { targetUrl: path }\n      });\n    };\n    fn();\n  }, [loading, isAuthenticated, loginWithRedirect, path]);\n\n  const render = props =>\n    isAuthenticated === true ? <Component {...props} /> : null;\n\n  return <Route path={path} render={render} {...rest} />;\n};\n\nexport default PrivateRoute;","import React, { useState, useEffect } from \"react\";\nimport \"./MessageListItem.css\";\n\nconst MessageListItem = (props) => {\n\n    const [date, setDate] = useState(new Date(props.date));\n    const [name, setName] = useState(props.name);\n    const [email, setEmail] = useState(props.email);\n    const [preview, setPreview] = useState(props.message.slice(0, 40) + \"...\");\n    const [displayMsg, setDisplayMsg] = useState(false);\n\n    useEffect(()=>{\n        if(displayMsg===true){\n            document.body.style.overflow = 'hidden';\n          } else {\n            document.body.style.overflow = '';\n          }\n    })\n      \n\n    const toggleDisplayMsg = () => {\n        if (displayMsg === true) {\n            setDisplayMsg(false)\n        } else {\n            setDisplayMsg(true)\n        }\n    }\n\n    const formattedDate = (date) => {\n\n        const _month_ = date.getMonth();\n        const day = date.getDate();\n\n        let month;\n\n        if (_month_ === 0) {\n            month = 'January'\n        } else if (_month_ === 1) {\n            month = 'February'\n        } else if (_month_ === 2) {\n            month = 'March'\n        } else if (_month_ === 3) {\n            month = 'April'\n        } else if (_month_ === 4) {\n            month = 'May'\n        } else if (_month_ === 5) {\n            month = 'June'\n        } else if (_month_ === 6) {\n            month = 'July'\n        } else if (_month_ === 7) {\n            month = 'August'\n        } else if (_month_ === 8) {\n            month = 'September'\n        } else if (_month_ === 9) {\n            month = 'October'\n        } else if (_month_ === 10) {\n            month = 'November'\n        } else if (_month_ === 11) {\n            month = 'December'\n        }\n\n        return `${month}-${day}`;\n    }\n\n    const msg = <div className=\"msg\">\n        <div className=\"msg-bg\"></div>\n        <div className=\"msg-dialogue\">\n            <div className=\"msg-header\">\n                <div className=\"msg-title\">{\"Message from \" + name}</div>\n                <button onClick={toggleDisplayMsg} id=\"msg-close\">Close</button>\n            </div>\n            <div className=\"modal-content\">{props.message}</div>\n            <div className=\"msg-action\"></div>\n        </div>\n    </div>\n\n    const msgListItem = <div className=\"msg-list-item\" onClick={toggleDisplayMsg}>\n        <span className=\"msg-date\">{formattedDate(date)}</span>\n        <span className=\"msg-name\">{name}</span>\n        <span className=\"msg-email\">{email}</span>\n    </div>\n\n    return (displayMsg === true ? msg : msgListItem);\n\n};\n\nexport default MessageListItem;","import React from \"react\";\nimport MessageListItem from \"../MessageListItem/MessageListItem\";\nimport \"./MessageList.css\"\n\nconst MessageList = (props) => {\n    \n\n    return(\n        <ul className=\"list\" style={{}}>\n            {props.messages.map((message,i)=>{\n                return(\n                    <li key={i}>\n                        <MessageListItem \n                        date={message.date}\n                        name={message.name}\n                        email={message.email}\n                        message={message.message}\n                        preview={message.preview}\n                        \n                        />\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default MessageList;","import React, { useState, useEffect } from \"react\";\nimport MessageList from \"../components/MessageList/MessageList\";\nimport ContactAPI from \"../services/contactApi\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst Messages = () => {\n    const { getTokenSilently } = useAuth0();\n    const [messages, setMessages] = useState([]);\n\n    const getAllMessages = async () => {\n        try {\n            const token = await getTokenSilently();\n            const url = \"http://localhost:5000/\"\n\n            const response = await fetch(url, {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            });\n\n            const responseData = await response.json();\n            setMessages(responseData.messages);\n\n\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    useEffect(() => {\n\n        getAllMessages()\n\n    }, []);\n\n    return (\n        <div>\n            <MessageList messages={messages} />\n        </div>\n    );\n};\n\nexport default Messages;","import React, { useState } from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst ExternalApi = () => {\n  const [showResult, setShowResult] = useState(false);\n  const [apiMessage, setApiMessage] = useState(\"\");\n  const { getTokenSilently } = useAuth0();\n\n  const callApi = async () => {\n    try {\n      const token = await getTokenSilently();\n      const url = \"http://localhost:5000/\"\n\n      const response = await fetch(url, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(token);\n      const responseData = await response.json();\n\n      setShowResult(true);\n      console.log(responseData);\n    } catch (error) {\n\n    \n      console.error(error);\n    }\n  };\n\n  return (\n    <>\n      <h1>External API</h1>\n      <button onClick={callApi}>Ping API</button>\n      {showResult && <code>{JSON.stringify(apiMessage, null, 2)}</code>}\n    </>\n  );\n};\n\nexport default ExternalApi;","import React from \"react\";\nimport \"./Header.css\"\n\nconst MessageList = (props) => {\n    \n\n    return(\n        <header className=\"header\">\n            <h1>Dashboard</h1>\n        </header>\n    );\n};\n\nexport default MessageList;","import React from \"react\";\nimport Nav from \"./components/Nav/Nav\";\nimport { useAuth0 } from \"./react-auth0-spa\";\n\nimport \"./App.css\";\nimport { Router, Route, Switch, useHistory } from \"react-router-dom\";\nimport Profile from \"./components/Profile/Profile\";\nimport history from \"./utils/history\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport Messages from \"./views/Messages\"\nimport ExternalApi from \"./views/ExternalApi\";\nimport Header from \"./components/Header/Header\"\n\n\nfunction App() {\n  \n  const { loading } = useAuth0();\n  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n\n  return (\n    <div className=\"App\">\n      <Router history={history}>\n        <header>\n          <Header />\n          <div className=\"spacer\"></div>\n        </header>\n        <nav>\n        <Nav />\n        </nav>\n        <Switch>\n          <Route path=\"/\" exact />\n          <PrivateRoute path=\"/profile\" component={Profile} />\n          <PrivateRoute path=\"/messages\" component={Messages} />\n          <PrivateRoute path=\"/external-api\" component={ExternalApi} />\n        </Switch>\n      </Router>\n    </div>\n  );\n\n\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./utils/history\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    audience={config.audience}\n    onRedirectCallback={onRedirectCallback}\n  >\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}